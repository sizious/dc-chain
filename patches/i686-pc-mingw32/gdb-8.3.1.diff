diff -ruN gdb-8.3.1/gdb/common/pathstuff.c gdb-8.3.1-mingw/gdb/common/pathstuff.c
--- gdb-8.3.1/gdb/common/pathstuff.c	2019-09-20 22:04:41 +0000
+++ gdb-8.3.1-mingw/gdb/common/pathstuff.c	2019-12-18 11:07:45 +0000
@@ -231,6 +231,12 @@
 #endif
 
   const char *home = getenv ("HOME");
+#ifdef _WIN32
+  if (home == nullptr)
+    {
+      home = getenv ("APPDATA");
+    }
+#endif
   if (home != NULL)
     {
       /* Make sure the path is absolute and tilde-expanded.  */
diff -ruN gdb-8.3.1/gdb/gnulib/import/strerror-override.c gdb-8.3.1-mingw/gdb/gnulib/import/strerror-override.c
--- gdb-8.3.1/gdb/gnulib/import/strerror-override.c	2019-09-20 22:04:41 +0000
+++ gdb-8.3.1-mingw/gdb/gnulib/import/strerror-override.c	2019-12-18 09:54:56 +0000
@@ -25,6 +25,9 @@
 
 #if GNULIB_defined_EWINSOCK /* native Windows platforms */
 # if HAVE_WINSOCK2_H
+#  ifdef __MINGW32__
+#  include <winerror.h>
+#  endif
 #  include <winsock2.h>
 # endif
 #endif
diff -ruN gdb-8.3.1/gdb/python/lib/gdb/__init__.py gdb-8.3.1-mingw/gdb/python/lib/gdb/__init__.py
--- gdb-8.3.1/gdb/python/lib/gdb/__init__.py	2019-09-20 22:04:41 +0000
+++ gdb-8.3.1-mingw/gdb/python/lib/gdb/__init__.py	2019-12-18 13:55:21 +0000
@@ -106,7 +106,32 @@
 
     return None
 
+def _execute_file(filepath):
+    """This function is used to replace Python 2's PyRun_SimpleFile.
 
+    Loads and executes the given file.
+
+    We could use the runpy module, but its documentation says:
+    "Furthermore, any functions and classes defined by the executed code are
+    not guaranteed to work correctly after a runpy function has returned."
+    """
+    globals = sys.modules['__main__'].__dict__
+    set_file = False
+    # Set file (if not set) so that the imported file can use it (e.g. to
+    # access file-relative paths). This matches what PyRun_SimpleFile does.
+    if not hasattr(globals, '__file__'):
+        globals['__file__'] = filepath
+        set_file = True
+    try:
+        with open(filepath, 'rb') as file:
+            # We pass globals also as locals to match what Python does
+            # in PyRun_SimpleFile.
+            compiled = compile(file.read(), filepath, 'exec')
+            exec(compiled, globals, globals)
+    finally:
+        if set_file:
+            del globals['__file__']
+	
 # Convenience variable to GDB's python directory
 PYTHONDIR = os.path.dirname(os.path.dirname(__file__))
 
diff -ruN gdb-8.3.1/gdb/python/python.c gdb-8.3.1-mingw/gdb/python/python.c
--- gdb-8.3.1/gdb/python/python.c	2019-09-20 22:04:41 +0000
+++ gdb-8.3.1-mingw/gdb/python/python.c	2019-12-18 14:06:35 +0000
@@ -323,9 +323,8 @@
    A FILE * from one runtime does not necessarily operate correctly in
    the other runtime.
 
-   To work around this potential issue, we create on Windows hosts the
-   FILE object using Python routines, thus making sure that it is
-   compatible with the Python library.  */
+   To work around this potential issue, we run code in Python to load
+   the script.  */
 
 static void
 python_run_simple_file (FILE *file, const char *filename)
@@ -339,6 +338,10 @@
   /* Because we have a string for a filename, and are using Python to
      open the file, we need to expand any tilde in the path first.  */
   gdb::unique_xmalloc_ptr<char> full_path (tilde_expand (filename));
+  
+#if defined(PyFile_FromString) && defined(PyFile_AsFile)
+
+  /* Python 2 */
   gdbpy_ref<> python_file (PyFile_FromString (full_path.get (), (char *) "r"));
   if (python_file == NULL)
     {
@@ -347,6 +350,25 @@
     }
 
   PyRun_SimpleFile (PyFile_AsFile (python_file.get ()), filename);
+  
+#else /* PyFile_FromString + PyFile_AsFile */
+
+  /* Python 3 */
+  if (gdb_python_module == nullptr
+      || ! PyObject_HasAttrString (gdb_python_module, "_execute_file"))
+    error (_("Installation error: gdb._execute_file function is missing"));
+
+  gdbpy_ref<> return_value
+    (PyObject_CallMethod (gdb_python_module, "_execute_file", "s",
+      full_path.get ()));
+  if (return_value == nullptr)
+    {
+      /* Use PyErr_PrintEx instead of gdbpy_print_stack to better match the
+         behavior of the non-Windows codepath.  */
+      PyErr_PrintEx(0);
+    }
+	
+#endif /* PyFile_FromString + PyFile_AsFile */
 
 #endif /* _WIN32 */
 }
diff -ruN gdb-8.3.1/gdb/ser-mingw.c gdb-8.3.1-mingw/gdb/ser-mingw.c
--- gdb-8.3.1/gdb/ser-mingw.c	2019-02-27 04:51:50 +0000
+++ gdb-8.3.1-mingw/gdb/ser-mingw.c	2019-12-18 09:55:11 +0000
@@ -29,6 +29,10 @@
 #include <unistd.h>
 #include <sys/types.h>
 
+#ifndef ERROR_IO_PENDING
+#include <winerror.h>
+#endif
+
 #include "command.h"
 
 struct ser_windows_state
